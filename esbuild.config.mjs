import esbuild from "esbuild";
import process, { stdin, stdout } from "process";
import builtins from "builtin-modules";
import fs from "fs";
import { execSync } from "child_process";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	await context.rebuild();
	if (fs.existsSync("./building/transition.js")) {
		execSync("node ./building/transition.js --hide --push --ab --rm --up --ver --gg:networkmastered", { stdio: "inherit" })
	}
	process.exit(0);
} else {
	let past = ""
	setInterval(() => {
		let r = fs.readFileSync("./main.js").toString()
		if (r != past) {
			past = r
			if (fs.existsSync("./building/transition.js")) {
				execSync("node ./building/transition.js --hide --push --ab --rm --up --ver --gg:networkmastered", { stdio: "inherit" })
			}
		}
	}, 250);
	await context.watch();
}
